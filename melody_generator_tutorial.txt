Python Melody Generator - Step by Step Tutorial
=========================================

Step 1: Setting Up Your Environment
---------------------------------
1. Create a new Python project
2. Install required packages:
```bash
pip install mido pygame numpy
```

3. Create main.py and add basic imports:
```python
import os
import time
from mido import Message, MidiFile, MidiTrack, bpm2tempo, MetaMessage
import random
import pygame
import numpy as np
```

Step 2: Creating the Basic Class Structure
----------------------------------------
1. Create the MelodyGenerator class:
```python
class MelodyGenerator:
    def __init__(self):
        pygame.init()
        pygame.mixer.init()

    def clear_screen(self):
        os.system('cls' if os.name == 'nt' else 'clear')
```

2. Add the main menu method:
```python
    def show_menu(self):
        while True:
            self.clear_screen()
            print("ðŸŽµ Python Melody Generator ðŸŽµ")
            print("\n1. Generate new melody")
            print("2. Generate chord progression")
            print("3. Exit")
            
            choice = input("\nEnter your choice (1-3): ")
            
            if choice == "1":
                self.generate_melody()
            elif choice == "2":
                self.generate_chord_progression()
            elif choice == "3":
                print("\nGoodbye! ðŸŽ¶")
                break
```

Step 3: Adding Musical Constants
------------------------------
1. Add scale modes:
```python
    SCALE_MODES = {
        "major": [0, 2, 4, 5, 7, 9, 11],
        "minor": [0, 2, 3, 5, 7, 8, 10],
        "dorian": [0, 2, 3, 5, 7, 9, 10],
        "blues": [0, 3, 5, 6, 7, 10]
    }
```

2. Add note-to-MIDI mapping:
```python
    NOTE_TO_MIDI = {
        "C": 60, "C#": 61, "D": 62, "D#": 63,
        "E": 64, "F": 65, "F#": 66, "G": 67,
        "G#": 68, "A": 69, "A#": 70, "B": 71
    }
```

Step 4: Creating Input Validation
-------------------------------
Add the input validation method:
```python
def get_valid_input(self, prompt, valid_options=None, value_type=str):
    while True:
        try:
            value = value_type(input(prompt))
            if valid_options is None or value in valid_options:
                return value
            print(f"Please enter one of: {', '.join(map(str, valid_options))}")
        except ValueError:
            print(f"Please enter a valid {value_type.__name__}")
```

Step 5: Building Basic Melody Generation
--------------------------------------
1. Add rhythm patterns:
```python
    RHYTHM_PATTERNS = {
        "basic": [(1, 1)] * 4,  # Quarter notes
        "upbeat": [(0.5, 0.5), (0.5, 0.5), (1, 1), (1, 1)],
        "waltz": [(1, 1), (0.5, 0.5), (0.5, 0.5)]
    }
```

2. Create the basic melody generator:
```python
    def generate_melody(self):
        # Get user inputs
        root_note = self.get_valid_input("Enter root note (C, C#, D, D#, etc.): ", 
                                       self.NOTE_TO_MIDI.keys()).upper()
        mode = self.get_valid_input("Enter scale mode: ", 
                                  self.SCALE_MODES.keys()).lower()
        bpm = self.get_valid_input("Enter tempo in BPM (60-180): ", 
                                 range(60, 181), int)

        # Create MIDI file
        mid = MidiFile()
        track = MidiTrack()
        mid.tracks.append(track)

        # Calculate scale notes
        root_midi = self.NOTE_TO_MIDI[root_note]
        scale_intervals = self.SCALE_MODES[mode]
        scale_notes = [root_midi + interval for interval in scale_intervals]

        # Generate simple melody
        for _ in range(8):  # 8 notes
            note = random.choice(scale_notes)
            velocity = random.randint(64, 100)
            track.append(Message('note_on', note=note, 
                               velocity=velocity, time=0))
            track.append(Message('note_off', note=note, 
                               velocity=0, time=mid.ticks_per_beat))

        # Save the file
        filename = f"{root_note}_{mode}_melody.mid"
        mid.save(filename)
```

Step 6: Adding Chord Progressions
-------------------------------
1. Add chord progressions dictionary:
```python
    CHORD_PROGRESSIONS = {
        "basic": [0, 5, 3, 4],          # I-vi-IV-V
        "jazz": [1, 4, 0, 5],           # ii-V-I-vi
        "blues": [0, 0, 0, 0, 4, 4, 0, 0, 5, 4, 0, 5]  # 12-bar blues
    }
```

2. Add chord types:
```python
    CHORD_TYPES = {
        'major': [0, 4, 7],
        'minor': [0, 3, 7],
        'dim': [0, 3, 6],
        'aug': [0, 4, 8]
    }
```

3. Create basic chord progression generator:
```python
    def generate_chord_progression(self):
        # Get user inputs
        root_note = self.get_valid_input("Enter root note: ", 
                                       self.NOTE_TO_MIDI.keys()).upper()
        progression_type = self.get_valid_input("Enter progression type: ", 
                                             self.CHORD_PROGRESSIONS.keys())
        bpm = self.get_valid_input("Enter tempo (60-180): ", 
                                 range(60, 181), int)

        # Create MIDI file
        mid = MidiFile()
        track = MidiTrack()
        mid.tracks.append(track)

        # Get progression
        progression = self.CHORD_PROGRESSIONS[progression_type]
        root_midi = self.NOTE_TO_MIDI[root_note]

        # Generate chords
        for chord_root in progression:
            # Build basic triad
            chord_notes = [root_midi + chord_root + interval 
                         for interval in self.CHORD_TYPES['major']]
            
            # Play chord
            for note in chord_notes:
                track.append(Message('note_on', note=note, 
                                   velocity=80, time=0))
            track.append(Message('note_off', note=chord_notes[-1], 
                               velocity=0, time=mid.ticks_per_beat))

        # Save file
        filename = f"{root_note}_{progression_type}_chords.mid"
        mid.save(filename)
```

Step 7: Adding Humanization
-------------------------
1. Add microshift function:
```python
    def apply_microshift(self, time_value, intensity=0.2):
        shift = np.random.normal(0, intensity * time_value)
        return max(0, int(time_value + shift))
```

2. Add velocity variation:
```python
    def get_dynamic_velocity(self, base_velocity, variation=10):
        return max(40, min(127, base_velocity + 
                         random.randint(-variation, variation)))
```

Step 8: Adding Strumming
----------------------
1. Add strum patterns:
```python
    STRUM_PATTERNS = {
        "none": {"direction": "none", "speed": 0},
        "down_slow": {"direction": "down", "speed": 20},
        "up_slow": {"direction": "up", "speed": 20},
        "alt_slow": {"direction": "alt", "speed": 20}
    }
```

2. Add strum application function:
```python
    def apply_strum(self, notes, velocities, pattern, is_note_on=True):
        if pattern == "none":
            return [(note, vel, 0) for note, vel in zip(notes, velocities)]
        
        direction = self.STRUM_PATTERNS[pattern]["direction"]
        speed = self.STRUM_PATTERNS[pattern]["speed"]
        
        if direction == "up":
            notes.reverse()
            velocities.reverse()
        
        return [(note, vel, speed if i > 0 else 0) 
                for i, (note, vel) in enumerate(zip(notes, velocities))]
```

Step 9: Putting It All Together
----------------------------
1. Create the main execution point:
```python
if __name__ == "__main__":
    generator = MelodyGenerator()
    generator.show_menu()
```

2. Test your program:
   - Generate a simple melody
   - Create a chord progression
   - Try different scales and modes
   - Experiment with strumming patterns

Next Steps for Enhancement
------------------------
1. Add more scales and modes
2. Implement more complex rhythm patterns
3. Add chord inversions
4. Create arpeggio patterns
5. Add swing feel
6. Implement different instruments
7. Add effects (reverb, chorus)
8. Create a GUI interface

Tips for Learning
---------------
1. Start with the basic version and add features one at a time
2. Test each new feature thoroughly before moving on
3. Use print statements to debug
4. Read the MIDI file specifications
5. Study basic music theory
6. Experiment with different parameters
7. Listen to the output and adjust accordingly

Remember: The best way to learn is by doing! Try modifying the code and adding your own features. Don't be afraid to experiment and make mistakes - that's how you learn! 